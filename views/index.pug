doctype html
// Authors: Justin Erickson, Richie Burch, Matt Hardin, Nathan Robertson
// Used https://html-to-pug.com/ to convert original html to pug
head
  meta(charset='utf-8')
  title PiCrafty
  script(src='public/blockly_compressed.js')
  script(src='public/python_compressed.js')
  script(src='public/msg/js/en.js')
  // Minecraft block methods
  script(src='public/minecraft_blocks/minecraft.js')
  script(src='public/minecraft_blocks/player.js')
  script(src='public/minecraft_blocks/vectorAttributes.js')
  script(src='public/minecraft_blocks/setVecAttrTo.js')
  script(src='public/minecraft_blocks/entity.js')
  script(src='public/minecraft_blocks/mcBlock.js')
  // Google implemented blocks
  script(src='public/google_blocks/lists.js')
  script(src='public/google_blocks/logic.js')
  script(src='public/google_blocks/loops.js')
  script(src='public/google_blocks/math.js')
  script(src='public/google_blocks/procedures.js')
  script(src='public/google_blocks/text.js')
  script(src='public/google_blocks/variables.js')
  script(src='public/google_blocks/variables_dynamic.js')
  style.
    html, body {
      height: 100%;
      margin: 0;
    }
    body {
      background-color: slategray;
      font-family: sans-serif;
    }
    h1 {
      font-weight: normal;
      font-size: 140%;
    }
    table {
      height: 100%;
      width: 100%;
    }
    #blocklyArea {
      height: 80%;
    }
    textarea {
      background-color: white;
      height: 50%;
      width: 100%;
      resize:none
    }

// table to divide up sections for blockly, buttons, and code in browser
table
  tr
    td#blocklyArea
      // This is the Div Blockly will render in. size can be adjusted here
      #blocklyDiv(style='position: absolute;')
  tr#buttons
    td
      p
        button(onclick='showCode()') Show Python Stub
        button(onclick='save()') Save
        button(onclick='restore()') Restore
        button(onclick='displayCodeInBrowser()') View code in browser
  tr
    td#codeAreaRow
form(action='/copy_text' method='POST')
  input(type='submit' value='Submit')
  br
  textarea#codeArea(name='codeArea' style='position:absolute; ')
include block_xml.pug
script.
  var blocklyArea = document.getElementById('blocklyArea');
  var blocklyDiv = document.getElementById('blocklyDiv');
  var demoWorkspace = Blockly.inject(blocklyDiv,
          {media: 'media' + "\\\",
            toolbox: document.getElementById('toolbox')});
  var onresize = function(e) {
    // Compute the absolute coordinates and dimensions of blocklyArea.
    var element = blocklyArea;
    var x = 0;
    var y = 0;
    do {
      x += element.offsetLeft;
      y += element.offsetTop;
      element = element.offsetParent;
    } while (element);
    // Position blocklyDiv over blocklyArea.
    blocklyDiv.style.left = x + 'px';
    blocklyDiv.style.top = y + 'px';
    blocklyDiv.style.width = blocklyArea.offsetWidth + 'px';
    blocklyDiv.style.height = blocklyArea.offsetHeight + 'px';
    Blockly.svgResize(demoWorkspace);
  };
  window.addEventListener('resize', onresize, false);
  onresize();
  Blockly.svgResize(demoWorkspace);
script.
  function showCode() {
    // Generate python  code and display it/Save It.
    //This helps Blockly avoid getting hung up
    Blockly.Python.INFINITE_LOOP_TRAP = null;
    //This converts the workspace into Code using the Code generation snippet in test_block
    let preamble = "from mine import *\\n\n" +
            "mc = Minecraft()\\n" +
            "\\n";
    var code = preamble + Blockly.Python.workspaceToCode(demoWorkspace);
    //This is all Preparation For Downloading the file
    var PythonStub = new Blob([code], {type:"text/plain"});
    var textToSaveAsURL = window.URL.createObjectURL(PythonStub);
    var downloadLink = document.createElement("a");
    downloadLink.download = 'Python_stub.py';
    downloadLink.innerHTML = "Download File";
    downloadLink.href = textToSaveAsURL;
    downloadLink.onclick = destroyClickedElement;
    downloadLink.style.display = "none";
    document.body.appendChild(downloadLink);
    //Clicks on the created element to Prompt for download.
    downloadLink.click();
    //Helpful for Debugging
    //alert(code);
  }
  function destroyClickedElement(event)
  {
    document.body.removeChild(event.target);
  }
  // https://groups.google.com/forum/#!topic/blockly/NDlC-l6DLEM
  // TODO: Clean up and finalize save and restore
  function save() {
    var xmlDom = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);
    var xmlText = Blockly.Xml.domToPrettyText(xmlDom);
    localStorage.setItem("blockly.xml", xmlText);
  }
  function restore() {
    var xmlText = localStorage.getItem("blockly.xml");
    if (xmlText) {
      Blockly.mainWorkspace.clear();
      xmlDom = Blockly.Xml.textToDom(xmlText);
      Blockly.Xml.domToWorkspace(Blockly.mainWorkspace, xmlDom);
    }
  }
  function displayCodeInBrowser()
  {
    Blockly.Python.INFINITE_LOOP_TRAP = null;
    let codeArea = document.getElementById("codeArea");
    let preamble = "from mine import *\\n\n" +
            "mc = Minecraft()\\n" +
            "\\n";
    codeArea.value = preamble + Blockly.Python.workspaceToCode(demoWorkspace);
  }
